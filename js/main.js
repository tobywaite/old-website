// Generated by CoffeeScript 1.3.3
(function() {
  var FeedModule, FlickrModule, GithubModule, LastFMModule,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var github, lastfm, twitter, yelp;
    github = new GithubModule().render();
    lastfm = new LastFMModule().render();
    twitter = new FeedModule('twitter').render();
    return yelp = new FeedModule('yelp').render();
  });

  FeedModule = (function() {

    function FeedModule(name) {
      this.name = name;
      this.loadTemplate = __bind(this.loadTemplate, this);

      this.loadContext = __bind(this.loadContext, this);

      this.source = ['http://tw-srv.herokuapp.com/', this.name].join('');
      this.domElement = $('#' + this.name);
    }

    FeedModule.prototype.render = function() {
      if (this.context === void 0) {
        this.loadContext();
      }
      if (this.template === void 0) {
        this.loadTemplate();
      }
      return this.domElement.html(Milk.render(this.template, this.context));
    };

    FeedModule.prototype.loadContext = function() {
      var _this = this;
      return $.ajax({
        url: this.source,
        async: false
      }).done(function(response) {
        return _this.context = _this.formatResponse(response);
      });
    };

    FeedModule.prototype.loadTemplate = function() {
      var _this = this;
      return $.ajax({
        url: ['/templates', '/', this.name, '.mustache'].join(''),
        async: false
      }).done(function(response) {
        return _this.template = response;
      });
    };

    FeedModule.prototype.formatResponse = function(response) {
      "When loading the context, reformat the response data to the appropriate\ncontext format. This should probably be overridden by extending classes.";
      return response;
    };

    return FeedModule;

  })();

  GithubModule = (function(_super) {

    __extends(GithubModule, _super);

    function GithubModule() {
      GithubModule.__super__.constructor.call(this, 'github');
      this.source = 'https://api.github.com/users/tobywaite/repos';
    }

    GithubModule.prototype.formatResponse = function(response) {
      var format, repo, repos;
      format = function(repo) {
        var formatDate, formatTime;
        formatDate = function(datestring) {
          return datestring.slice(0, 10);
        };
        formatTime = function(datestring) {
          return datestring.slice(11, 19);
        };
        return {
          repoUrl: repo.html_url,
          repoName: repo.name,
          repoDesc: repo.description,
          commitMessage: "no commit data",
          commitDate: formatDate(repo.updated_at),
          commitTime: formatTime(repo.updated_at)
        };
      };
      repos = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = response.length; _i < _len; _i++) {
          repo = response[_i];
          _results.push(format(repo));
        }
        return _results;
      })();
      return repos[0];
    };

    return GithubModule;

  })(FeedModule);

  LastFMModule = (function(_super) {

    __extends(LastFMModule, _super);

    function LastFMModule() {
      LastFMModule.__super__.constructor.call(this, 'lastfm');
      this.source = 'http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=thebrokenfish&api_key=b25b959554ed76058ac220b7b2e0a026&format=json';
    }

    LastFMModule.prototype.formatResponse = function(response) {
      var format, track, tracks;
      format = function(track) {
        var _ref;
        return {
          nowPlaying: (_ref = track['@attr']) != null ? _ref.nowplaying : void 0,
          song: track.name,
          artist: track.artist.name,
          album: track.album['#text'],
          artUrl: track.image[1]['#text']
        };
      };
      tracks = (function() {
        var _i, _len, _ref, _results;
        _ref = response.recenttracks.track;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          track = _ref[_i];
          _results.push(format(track));
        }
        return _results;
      })();
      return tracks[0];
    };

    return LastFMModule;

  })(FeedModule);

  FlickrModule = (function(_super) {

    __extends(FlickrModule, _super);

    function FlickrModule() {
      FlickrModule.__super__.constructor.call(this, 'flickr');
      this.source = 'http://api.flickr.com/services/rest/?method=flickr.activity.userPhotos&format=json';
    }

    return FlickrModule;

  })(FeedModule);

}).call(this);
